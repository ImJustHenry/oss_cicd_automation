This PR addresses the following CI/CD ticket: oss-slu/oss_cicd_automation#1

What was investigated?

Checked Windows Event Logs for crash evidence. Initial Windows DCOM log entries (ContentDeliveryManager) were noise and unrelated.
Reproduced the crash locally by running the packaged .exe from Command Prompt. That revealed Python runtime/DLL errors and file-not-found exceptions for package data files.
Confirmed the app runs in a development environment with python GUI.py (so the crash is packaging and dependency-related).
What was changed?

Added comments to requirements.txt file, specifically for pattern and lightning fabric.
Created a section titled "Known Issues and Packaging Notes" in the README.md file describing why the .exe file crashes on a Windows machine
What were the root causes behind the crash?

Missing runtime data files in the packaged build: some third-party packages (notably pattern and lightning_fabric) rely on non-Python model/data files (e.g., pattern/text/en/en-model.slp, lightning_fabric/version.info) that PyInstaller does not bundle by default.
Mismatched build Python / missing DLLs: the .exe sometimes reported missing python3x.dll indicating the build environment and target runtime were not aligned.
Packages requiring compilation: webrtcvad failed to build without MS Visual C++ Build Tools.
FFmpeg missing: pydub emits a warning if ffmpeg is not on PATH (nonfatal but affects audio processing).
Actions taken in Windows Command Prompt (reproducible steps)

Created a clean Python 3.9 virtual environment (we used venv39) to ensure compatibility with pattern:

python -m venv venv39
venv39\Scripts\activate
python -m pip install --upgrade pip

Installed dependencies by pip install -r requirements.txt. For pattern, we installed from GitHub because PyPI is outdated: pip install git+https://github.com/clips/pattern.git, and for Whisper and other heavy dependencies: pip install openai-whisper pyannote.audio. For packages requiring native build tools:

pip install webrtcvad
If this fails, install Visual C++ Build Tools and retry:
https://visualstudio.microsoft.com/visual-cpp-build-tools/

Rebuilt the .exe using PyInstaller and explicitly bundled runtime data and resource folders. Example command (Windows):
pyinstaller --onefile --windowed GUI.py ^
--add-data "images;images" ^
--add-data "components;components" ^
--add-data "venv39\Lib\site-packages\pattern\text;pattern/text" ^
--add-data "venv39\Lib\site-packages\lightning_fabric;lightning_fabric" ^
--add-data "venv39\Lib\site-packages\pyannote;pyannote" ^
--add-data "venv39\Lib\site-packages\torch;torch" ^
--add-data "venv39\Lib\site-packages\torchaudio;torchaudio

Notes:
On Windows use semicolon (;) in --add-data pairs (source;dest). On macOS/Linux use colon (:).
If PyInstaller errors on the backport typing package, uninstall it from the venv:

venv39\Scripts\python -m pip uninstall typing

Verified that python GUI.py runs in the venv, and dist\GUI.exe launches (tested locally). If still failing, check the Windows Event Viewer and run the .exe from a Command Prompt to capture printed errors.
